version: '3'
services:

  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: php:7.2
    container_name: php-app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
       - ./www:/var/www
       - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - proxy

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    expose:
      - 80
    volumes:
      - ./www:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - proxy
    labels:
      traefik.enable: true
      traefik.http.routers.nginxnextcloud-http.rule: Host(`${DOMAIN_NAME}`) # indique à Traefik que le Host de la requête doit être 'xxx.xxx.xxx'
      traefik.http.routers.nginxnextcloud-http.entrypoints: http # indique à Traefik que la route n'écoute que l'entrypoint 'web' (port 80)
      traefik.http.routers.sample-http.service: sample-http # associe la route au service qu'on crée en dessous 'traefik.http.services.sample-http.loadBalancer.server.port=80'
      traefik.http.services.sample-http.loadBalancer.server.port: 80 # on indique au service de transférer la requête sur le port 80 du container
      #traefik.http.routers.nginxnextcloud-http.middlewares: https-redirect@file
      #traefik.http.routers.nginxnextcloud-https.rule: "Host(`${DOMAIN_NAME}`)"
      #traefik.http.routers.nginxnextcloud-https.entrypoints: "https"
      #traefik.http.routers.nginxnextcloud-https.tls: "true"
      #traefik.http.routers.nginxnextcloud-https.tls.certresolver: "default"

  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: admin
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./.mysql:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - proxy

#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 8080:8080
#    networks:
#      - proxy

#  mailcatcher:
#    image: schickling/mailcatcher:latest
#    container_name: mailcatcher
#    ports:
#        - 8003:1025
#        - 8100:1080
#    networks:
#      - proxy

networks:
  proxy:
    external: true # utilise le network externe utilisé par Traefik

#Volumes
#volumes:
#  dbdata:
#    driver: local
