version: '3.4'

services:
  # PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: php:7.3-fpm-xdebug
    container_name: api-radama-php
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    volumes:
       - ./www:/var/www
       - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - proxy

  # Nginx Service
  webserver:
    image: nginx:alpine
    container_name: api-radama-nginx
    restart: unless-stopped
    tty: true
    expose:
      - 80
    volumes:
      - ${SOURCE_DIRECTORY}:/var/www
      - ./nginx/:/etc/nginx/conf.d/
    networks:
      - proxy
    labels:
      traefik.enable: true
      traefik.http.routers.nginx.rule: Host(`${APP_DOMAIN_NAME}`) # indique à Traefik que le Host de la requête doit être 'xxx.xxx.xxx'
      traefik.http.routers.nginx.entrypoints: http # indique à Traefik que la route n'écoute que l'entrypoint 'web' (port 80)
      traefik.http.routers.nginx-http.service: nginx-http # associe la route au service qu'on crée en dessous 'traefik.http.services.sample-http.loadBalancer.server.port=80'
      traefik.http.services.nginx-http.loadBalancer.server.port: 80 # on indique au service de transférer la requête sur le port 80 du container
      #traefik.http.routers.nginxnextcloud-http.middlewares: https-redirect@file
      #traefik.http.routers.nginxnextcloud-https.rule: "Host(`${APP_DOMAIN_NAME}`)"
      #traefik.http.routers.nginxnextcloud-https.entrypoints: "https"
      #traefik.http.routers.nginxnextcloud-https.tls: "true"
      #traefik.http.routers.nginxnextcloud-https.tls.certresolver: "default"

  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: api-radama-db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - api-radama-db-data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - proxy

  # MySQL administrator
  adminer:
    image: adminer
    container_name: api-radama-adminer
    restart: always
    labels:
      traefik.enable: true
      traefik.http.routers.adminer.rule: Host(`${ADMINER_DOMAIN_NAME}`) # indique à Traefik que le Host de la requête doit être 'xxx.xxx.xxx'
      traefik.http.routers.adminer.entrypoints: http # indique à Traefik que la route n'écoute que l'entrypoint 'web' (port 80)
      traefik.http.routers.adminer-http.service: adminer-http # associe la route au service qu'on crée en dessous 'traefik.http.services.sample-http.loadBalancer.server.port=80'
      traefik.http.services.adminer-http.loadBalancer.server.port: 8080 # on indique au service de transférer la requête sur le port 8080 du container
    networks:
      - proxy

  # Mail service
  mailcatcher:
    image: schickling/mailcatcher:latest
    container_name: api-radama-mailcatcher
    ports:
      - 8003:1025 # Tester si l'envoi d'email arrive bien dans mailcatcher
    labels:
      traefik.enable: true
      traefik.http.routers.mailcatcher.rule: Host(`${MAILCATCHER_DOMAIN_NAME}`) # indique à Traefik que le Host de la requête doit être 'xxx.xxx.xxx'
      traefik.http.routers.mailcatcher.entrypoints: http # indique à Traefik que la route n'écoute que l'entrypoint 'web' (port 80)
      traefik.http.routers.mailcatcher-http.service: mailcatcher-http # associe la route au service qu'on crée en dessous 'traefik.http.services.sample-http.loadBalancer.server.port=80'
      traefik.http.services.mailcatcher-http.loadBalancer.server.port: 1080 # on indique au service de transférer la requête sur le port 8080 du container
    networks:
      - proxy

# Networks
networks:
  proxy:
    external: true # utilise le network externe utilisé par Traefik

# Volumes
volumes:
  api-radama-db-data:
    name: api-radama-db-data
    driver: local
